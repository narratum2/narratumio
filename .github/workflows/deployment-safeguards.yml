name: Deployment Safeguards

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  safeguard-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    
    - name: Check for critical file changes
      run: |
        echo "üîç Checking for critical changes..."
        
        # Check if core files were modified
        CRITICAL_FILES=(
          "index.html"
          "styles.css" 
          "script.js"
          "ai-agent-coordinator.js"
        )
        
        CHANGED_FILES=$(git diff --name-only HEAD~1)
        CRITICAL_CHANGED=""
        
        for file in "${CRITICAL_FILES[@]}"; do
          if echo "$CHANGED_FILES" | grep -q "^$file$"; then
            CRITICAL_CHANGED="$CRITICAL_CHANGED $file"
          fi
        done
        
        if [ -n "$CRITICAL_CHANGED" ]; then
          echo "‚ö†Ô∏è Critical files changed:$CRITICAL_CHANGED"
          echo "CRITICAL_CHANGES=true" >> $GITHUB_ENV
        else
          echo "‚úÖ No critical files changed"
          echo "CRITICAL_CHANGES=false" >> $GITHUB_ENV
        fi
    
    - name: Validate HTML structure
      if: contains(github.event.head_commit.modified, 'index.html')
      run: |
        echo "üîç Validating HTML structure..."
        
        # Check for required elements
        REQUIRED_ELEMENTS=(
          ".nav-dot"
          ".symbol-item"
          ".symbol-content"
          "#contactForm"
          ".loading-screen"
        )
        
        for element in "${REQUIRED_ELEMENTS[@]}"; do
          if ! grep -q "$element" index.html; then
            echo "‚ùå Missing required element: $element"
            exit 1
          else
            echo "‚úÖ Found: $element"
          fi
        done
    
    - name: Check for merge conflicts
      run: |
        echo "üîç Checking for merge conflict markers..."
        
        CONFLICT_MARKERS=$(grep -r "<<<<<<\|======\|>>>>>>" . --exclude-dir=.git --exclude-dir=node_modules || true)
        
        if [ -n "$CONFLICT_MARKERS" ]; then
          echo "‚ùå Merge conflict markers found:"
          echo "$CONFLICT_MARKERS"
          exit 1
        else
          echo "‚úÖ No merge conflicts detected"
        fi
    
    - name: Validate AI Agent Coordination
      run: |
        echo "üîç Validating AI agent system..."
        
        # Check coordinator is properly loaded
        if ! grep -q "ai-agent-coordinator.js" index.html; then
          echo "‚ùå AI Agent Coordinator not loaded in HTML"
          exit 1
        fi
        
        # Check coordinator file exists
        if [ ! -f "assets/js/ai-agent-coordinator.js" ]; then
          echo "‚ùå AI Agent Coordinator file missing"
          exit 1
        fi
        
        echo "‚úÖ AI coordination system validated"
    
    - name: Security check
      run: |
        echo "üîç Running security checks..."
        
        # Check for suspicious patterns
        SUSPICIOUS_PATTERNS=(
          "eval("
          "innerHTML.*<script"
          "document.write.*<script"
          "setTimeout.*eval"
        )
        
        for pattern in "${SUSPICIOUS_PATTERNS[@]}"; do
          MATCHES=$(grep -r "$pattern" . --exclude-dir=.git --exclude-dir=node_modules || true)
          if [ -n "$MATCHES" ]; then
            echo "‚ö†Ô∏è Suspicious pattern found: $pattern"
            echo "$MATCHES"
          fi
        done
        
        echo "‚úÖ Security check completed"
    
    - name: Performance validation
      run: |
        echo "üîç Checking performance considerations..."
        
        # Check file sizes
        HTML_SIZE=$(wc -c < index.html)
        CSS_SIZE=$(wc -c < styles.css)
        JS_SIZE=$(wc -c < script.js)
        
        echo "File sizes:"
        echo "  HTML: $HTML_SIZE bytes"
        echo "  CSS: $CSS_SIZE bytes" 
        echo "  JS: $JS_SIZE bytes"
        
        # Warn if files are getting too large
        if [ $HTML_SIZE -gt 100000 ]; then
          echo "‚ö†Ô∏è HTML file is quite large ($HTML_SIZE bytes)"
        fi
        
        if [ $CSS_SIZE -gt 500000 ]; then
          echo "‚ö†Ô∏è CSS file is quite large ($CSS_SIZE bytes)"
        fi
        
        if [ $JS_SIZE -gt 300000 ]; then
          echo "‚ö†Ô∏è JavaScript file is quite large ($JS_SIZE bytes)"
        fi
        
        echo "‚úÖ Performance check completed"
        
    - name: Final deployment readiness
      run: |
        echo "üöÄ Deployment readiness summary:"
        echo "Critical changes: $CRITICAL_CHANGES"
        
        if [ "$CRITICAL_CHANGES" = "true" ]; then
          echo "‚ö†Ô∏è  This deployment includes critical changes"
          echo "üîç Extra attention required for monitoring post-deployment"
        else
          echo "‚úÖ Safe deployment - no critical changes detected"
        fi
        
        echo "‚úÖ All safeguard checks passed - deployment approved"
